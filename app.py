import subprocess
from flask import Flask, request, jsonify, redirect
from flask import render_template, url_for
from werkzeug.wrappers import Response
import os
from werkzeug.utils import secure_filename
from flask import send_from_directory
import zipfile
import requests
import time
import sys
import argparse
import gzip
sys.path.append(r'/var/www/html/static/EVmutation')
import EV

app = Flask(__name__)

@app.route('/')
def home():
    return render_template('home.html')

@app.route('/workland/')
def workland():
    return render_template('frontier.html')

@app.route('/jalview/')
def jalview():
    return render_template('jalview.html')

@app.route('/final/')
def final():
    return render_template('final.html')

@app.route('/PSSM/')
def PSSM():
    return render_template('PSSM.html')

@app.route('/Alignment-submit', endpoint='Alignment-submit', methods=['GET', 'POST'])
def recordList():
    # 设置文件上传保存路径
    app.config['UPLOAD_FOLDER'] = './static/Alignment'
    # MAX_CONTENT_LENGTH设置上传文件的大小，单位字节
    app.config['MAX_CONTENT_LENGTH'] = 1 * 1024 * 1024
    f = request.files.get('Alignment-input')
    # 重规定文件名
    fileName = "input.txt";
    # os.path.join拼接地址，上传地址，f.filename获取文件名
    f.save(os.path.join(app.config['UPLOAD_FOLDER'], fileName))
    args = ["python", "clustalo.py", "--email", "a1145141919810@mail.ustc.edu.cn", "--outfile", "output", "./static/Alignment/input.txt"]
    result = subprocess.run(args)

    with open('./output.aln-clustal_num.clustal_num', 'r') as f:
        data = f.read()
        data = data.split('\n\n')

    subprocess.run(['cp','output.fa.sqr.fa','./static/Alignment/output.txt'])

    response = jsonify(data)

    return response

@app.route('/EV-submit', endpoint='EV-submit', methods=['GET', 'POST'])
def recordList():
    EV_sequence=str(request.form.get('EV_sequence'))
    EV_sequence=EV_sequence.split('\n', 1)[1]
    with open('./static/EVmutation/example/PABP_YEAST.a2m', 'w') as f:
        f.write('>PABP_YEAST/115-210\n')
        f.write(EV_sequence)
    response = EV.EVrun()


    return response

@app.route('/PSSM-submit', endpoint='PSSM-submit', methods=['GET', 'POST'])
def recordList():
    PSSM=str(request.form.get('PSSM'))
    input_path='./static/PSSM/input.fasta'
    with open(f'{input_path}', 'w') as f:
        f.write(PSSM)
    db_path='./static/PSSM/db/swissprot'
    out_path='./static/PSSM/result.pssm'
    os.system('/usr/bin/psiblast -query '+input_path + ' -db '+db_path+' -evalue 0.001 -num_iterations 3' + ' -out_ascii_pssm '+out_path)
    subprocess.run(['cp', f'{out_path}', './static/PSSM/result.txt'])
    print("ok")

    response = 'ok'

    return response

@app.route('/Uniprot-submit', endpoint='Uniprot-submit', methods=['GET', 'POST'])
def recordList():
    import requests
    import gzip
    search = str(request.form.get('Uniprot'))
    query = requests.get("https://rest.uniprot.org/uniprotkb/search?compressed=true&format=fasta&query=%28"+search+"%29&size=10")
    data = gzip.decompress(query.content)

    data = data.decode('utf-8')
    data = data.split('>')[1:]

    new_data = ""

    for item in data:
        item = ">" + item
        withhead = item.split('\n',1)
        # item = withhead[0] + "\n" + withhead[1][:200] + "\n"
        
        new_data += item
    with open('./static/Alignment/input.txt', 'w') as f:
        f.write(new_data)
    
    new_data = new_data.split('>')

    response = jsonify(new_data)
    
    return response

@app.route('/Uniprot-out')
def Uniprot_out():
    app.config['UPLOAD_FOLDER'] = './static/Alignment'
    path = os.path.isfile(os.path.join(app.config['UPLOAD_FOLDER'], 'input.txt'));
    if path:
        return send_from_directory(app.config['UPLOAD_FOLDER'], 'input.txt', as_attachment=True)

@app.route('/Alignment-out')
def Alignment_out():
    app.config['UPLOAD_FOLDER'] = './'
    path = os.path.isfile(os.path.join(app.config['UPLOAD_FOLDER'], 'output.fa.sqr.fa'));
    if path:
        return send_from_directory(app.config['UPLOAD_FOLDER'], 'output.fa.sqr.fa', as_attachment=True)

@app.route('/DNAWorks-out')
def DNAWorks_out():
    app.config['UPLOAD_FOLDER'] = './static/DNAWorks'
    path = os.path.isfile(os.path.join(app.config['UPLOAD_FOLDER'], 'output.txt'));
    if path:
        return send_from_directory(app.config['UPLOAD_FOLDER'], 'output.txt', as_attachment=True)

@app.route('/SwissModel_download')
def SwissModel_download():
    app.config['UPLOAD_FOLDER'] = './static/SwissModel/'
    path = os.path.isfile(os.path.join(app.config['UPLOAD_FOLDER'], 'Structure_Prediction_Result.pdb'))
    if path:
        return send_from_directory(app.config['UPLOAD_FOLDER'], 'Structure_Prediction_Result.pdb', as_attachment=True)

@app.route('/PSSM_download')
def PSSM_download():
    app.config['UPLOAD_FOLDER'] = './static/PSSM/'
    path = os.path.isfile(os.path.join(app.config['UPLOAD_FOLDER'], 'result.pssm'));
    if path:
        return send_from_directory(app.config['UPLOAD_FOLDER'], 'result.pssm', as_attachment=True)

@app.route('/Codon_download')
def Codon_download():
    app.config['UPLOAD_FOLDER'] = './static/DNAWorks/'
    path = os.path.isfile(os.path.join(app.config['UPLOAD_FOLDER'], 'output.txt'))
    if path:
        return send_from_directory(app.config['UPLOAD_FOLDER'], 'output.txt', as_attachment=True)



@app.route('/Primer_download')
def Primer_download():
    app.config['UPLOAD_FOLDER'] = './static/blast/'
    path = os.path.isfile(os.path.join(app.config['UPLOAD_FOLDER'], 'primer_blast_result.zip'))
    if path:
        return send_from_directory(app.config['UPLOAD_FOLDER'], 'primer_blast_result.zip', as_attachment=True)

@app.route('/SwissModel-submit', endpoint='SwissModel-submit', methods=['GET', 'POST'])
def SwissModel_submit():
    SwissModel = str(request.form.get('SwissModel'))
    Automodel_test_target_sequences = SwissModel.replace('\n','')
    print('start')

    # 参数
    time_start=time.time()
    token = 'bb27eebd3c3308ebfcd84fcab4284465c837d9ad' # 注册SwissModel账号可获取
    local_path = './static/SwissModel/' # 输出路径，请自行修改
    parser = argparse.ArgumentParser()
    parser.add_argument('--project',type=str,default='Automodel')    # project 取值 Automodel，Alignment,User_Template
    parser.add_argument('--test',type=str,default='TEST')            # test 取值 TEST 时跑测试样例，else跑自己的输入（还没写）
    parser.add_argument('--output_type',type=str,default='')         # 取值 ALL 则下载历史全部输出文件 否则只输出当次结果
    parser.add_argument('--pdb_file',type=str,default='pdb3l9y.pdb') # User_Template 的输入pdb文件
    args=parser.parse_args()
    # test cases
    
    Automodel_test_project_title = "project"


    # 创建项目 Automodel，Alignment,User_Template
    if args.project == "Automodel" :
        if args.test == "TEST":
            response = requests.post(
                "https://swissmodel.expasy.org/automodel",
                headers={ "Authorization": f"Token {token}" },
                json={ 
                    "target_sequences": 
                        Automodel_test_target_sequences,
                    "project_title":
                        Automodel_test_project_title
                })
        else :
            print("default: invalid input")
            print("Please use the test cases")
            sys.exit(0)
        filename = "Automodel"
    elif args.project == "Alignment":
        if args.test == "TEST":
            response = requests.post(
            "https://swissmodel.expasy.org/alignment",
            headers={ "Authorization": f"Token {token}" },
            json={ 
                "target_sequences":  "KSCCPTTAARNQYNICRLPGTPRPVCAALSGCKIISGTGCPPGYRH",
                "template_sequence": "TTCCPSIVARSNFNVCRLPGTPEAICATYTGCIIIPGATCPGDYAN",
                "template_seqres_offset": 0,
                "pdb_id": "1crn",
                "auth_asym_id": "A",
                "assembly_id": 1,
                "project_title": "This is an example of Aligment mode based on 1crn"
                })
        else :
            print("default: invalid input")
            print("Please use the test cases")
            sys.exit(0)
        filename = "Alignment"
    elif args.project == "User_Template":
        if args.test == "TEST":
            with open(args.pdb_file) as f:
                template_coordinates = f.read()
            response = requests.post(
                "https://swissmodel.expasy.org/user_template",
                headers={ "Authorization": f"Token {token}" },
                json={
                    "target_sequences": "MVVKAVCVINGDAKGTVFFEQESSGTPVKVSGEVCGLAKGLHGFHVHEFGDNTNGCMSSGPHFNPYGKEHGAPVDENRHLGDLGNIEATGDCPTKVNITDSKITLFGADSIIGRTVVVHADADDLGQGGHELSKSTGNAGARIGCGVIGIAKV",
                    "template_coordinates": template_coordinates,
                    "project_title":"This is an example of User Template based on SODC_DROME"
                    })
        else :
            print("default: invalid input")
            print("Please use the test cases")
            sys.exit(0)
        filename = "User_Template"
    else :
        print("default: invalid input")
        print("valid inputs are Automodel, Alignment, User_Template")
        sys.exit(0)

    print(response)
    project_id = response.json()["project_id"]
    print("project_id =",project_id)


    # 获取结果
    while True:
        time.sleep(10)
        response = requests.get(
            f"https://swissmodel.expasy.org/project/{ project_id }/models/summary/", 
            headers={ "Authorization": f"Token {token}" })
        status = response.json()["status"]
        print('Job status is now', status)
        if status in ["COMPLETED", "FAILED"]:
            break
    response_object = response.json()
    if response_object['status']=='COMPLETED':
        for model in response_object['models']:
            coordinates_url = model['coordinates_url']
            print("coordinates_url =",coordinates_url)
    # Start a new job which will package all modelling jobs in a single zip archive
    # If any jobs are still running, a download_id will not be available and the status code will be 400
    response = requests.post(f"https://swissmodel.expasy.org/projects/download/", 
        headers={ "Authorization": f"Token {token}" })
    # check that the status_code of the response is either 200 or 202 before proceeding
    if response.status_code not in [200, 202]:
        print("response.text =",response.text)
        import sys
        sys.exit()
    # Obtain the download_id for the packaged file
    download_id = response.json()['download_id']


    # 获取URL和本地路径
    if args.output_type == 'ALL':
        while True:
            time.sleep(5)
            response = requests.get(
                f"https://swissmodel.expasy.org/projects/download/{ download_id }/", 
                headers={ "Authorization": f"Token {token}" })
            # Wait for the response status to be COMPLETED
            if response.json()['status'] in ['COMPLETED', 'FAILED']:
                break
        print("Fetch the results from", response.json()["download_url"])
        url = response.json()["download_url"]
        file = str(local_path)+'All_works.zip'
    else: 
        print("Fetch the results from", coordinates_url)
        url = coordinates_url
        file = str(local_path)+'Structure_Prediction_Result.gz'
    # 下载文件
    r = requests.get(url)
    if(os.path.exists(local_path) == False):
        os.makedirs(local_path)
    with open(file, "wb") as code:
        code.write(r.content)
    f_name = file.replace('.gz', '.pdb')
    g_file = gzip.GzipFile(file)
    open(f_name, "wb").write(g_file.read())
    g_file.close()
    time_end=time.time()
    time_sum=time_end-time_start
    print("runtime =",time_sum)

    response = jsonify({'ret': True, 'msg': '登录成功!'})
    response.status_code = 200

    return response

@app.route('/codon-submit', endpoint='codon-submit', methods=['GET', 'POST'])
def recordList():
    # 密码子优化部分
    codon_input_path="./static/DNAWorks/input.inp"
    codon_output_path="./static/DNAWorks/output.txt"
    codon_exe_path="./static/DNAWorks/dnaworks"

    title="codon"
    temperature_range_from=str(62)
    temperature_range_to=str(62)
    length_range_from=str(180)
    length_range_to=str(180)
    frequency_threshold=str(10)
    oligo="1E-7"
    sodium=str(0.05)
    magnesium=str(0.02)
    solutions=str(1)
    #length_random=str(request.form.get('length_random'))
    #freq_random=str(request.form.get('freq_random'))
    #freq_strict=str(request.form.get('freq_strict'))
    #freq_score=str(request.form.get('freq_score'))
    codon_type=str(request.form.get('Codon_type'))
    codon_sequence=str(request.form.get('Codon_sequence'))

    with open('./static/DNAWorks/input.fasta','w') as f:
        f.write(codon_sequence)

    if (codon_sequence[0]=='>'):
        codon_sequence=codon_sequence[codon_sequence.find('\n')+1:]

    with open(f'{codon_input_path}','w') as f:
        f.write('title "'+title+'"'+'\n')
        f.write("timelimit 900"+'\n')
        f.write('melting low '+temperature_range_from+' high '+temperature_range_to+' tolerance'+'\n')
        f.write("length low "+length_range_from+" high "+length_range_to+'\n')
        f.write("frequency threshold "+frequency_threshold+'\n')
        f.write("concentration oligo "+oligo+" sodium "+sodium+" magnesium "+magnesium+'\n')
        f.write("solutions "+solutions+'\n'+'\n')
        f.write("codon "+codon_type+'\n'+'\n')
        f.write("protein"+'\n'+codon_sequence+'\n')
        f.write("//")

    

    with open(f'{codon_output_path}','w') as f:
        subprocess.run([f'{codon_exe_path}',f'{codon_input_path}'])

    subprocess.run(['mv','LOGFILE.txt','./static/DNAWorks/output.txt'])

    

    import re

    # 打开文件
    with open("./static/DNAWorks/output.txt", "r") as logfile:
        # 读取文件的内容
        logfile_content = logfile.read()

    # 使用正则表达式提取DNA序列部分
    pattern_CA = r"CODON FREQUENCY TABLE:(.*?)(?=SEQUENCE PATTERNS TO BE SCREENED)"
    pattern = r"The DNA sequence #   1 is:(.*?)(?=The oligonucleotide assembly is:)"
    match_CA = re.search(pattern_CA, logfile_content, re.DOTALL)
    match = re.search(pattern, logfile_content, re.DOTALL)

    if match_CA and match:
        CA = match_CA.group(1).strip()
        dna_sequence = match.group(1).strip()
        dna_sequence = ''.join([i for i in dna_sequence if not i.isdigit()])
        dna_sequence = dna_sequence.replace(' ', '')
    else:
        CA = "not found"
        dna_sequence = "DNA sequence not found"

    # 将DNA序列写入output.txt文件
    with open("./static/DNAWorks/output.txt", "w") as output_file:
        output_file.write("CODON FREQUENCY TABLE: ")
        output_file.write(CA + "\n\n")
        output_file.write("The DNA sequence #   1 is:\n")
        output_file.write(dna_sequence + "\n")
        f = open("./static/DNAWorks/input.fasta", "w")
        f.write('>input')
        f.write(dna_sequence)
        f.close()
        args = ["sudo", "python", "./static/DNAWorks/OP/optimize.py", codon_type]
        subprocess.run(args)
        f = open("./static/DNAWorks/final_seqs.txt", "r")
        line = f.readline()
        output_file.write("\n\nOptimizing Result Based on Two Consecutive Codons\n")
        output_file.write(line)
        f.close()
        
        

    print("写入output_user.txt成功。")

    

    response = jsonify({'ret': True, 'msg': '登录成功!'})
    response.status_code = 200

    return response



@app.route('/primer-submit', endpoint='primer-submit', methods=['GET', 'POST'])
def recordList():

    # 引物设计部分

    ## 样本部分
    SEQUENCE_ID = "primer_design"
    SEQUENCE_TEMPLATE = str(request.form.get('primer_sequence'))
    PRIMER_TASK = "pick_cloning_primers"
    PRIMER_PICK_LEFT_PRIMER = "1"
    PRIMER_PICK_INTERNAL_OLIGO = "0"
    PRIMER_PICK_RIGHT_PRIMER = "1"
    PRIMER_OPT_SIZE = "20"
    PRIMER_MIN_SIZE = "15"
    PRIMER_MAX_SIZE = "30"
    PRIMER_PRODUCT_SIZE_RANGE_FROM = "30"
    PRIMER_PRODUCT_SIZE_RANGE_TO = "1000"
    PRIMER_EXPLAIN_FLAG = "1"

    temp = SEQUENCE_TEMPLATE.split('\n')
    SEQUENCE_TEMPLATE = ""
    for seq in temp:
        SEQUENCE_TEMPLATE += seq

    pri_input_path="./primer3/primer/primer_in.txt"
    pri_output_path="./primer3/primer/primer_out.txt"
    pri_exe_path="./primer3/src/primer3_core"
    

    with open(f'{pri_input_path}','w') as f:
        f.write("SEQUENCE_ID="+SEQUENCE_ID+'\n')
        f.write("SEQUENCE_TEMPLATE="+SEQUENCE_TEMPLATE+'\n')
        f.write("PRIMER_TASK="+PRIMER_TASK+'\n')
        f.write("PRIMER_PICK_LEFT_PRIMER="+PRIMER_PICK_LEFT_PRIMER+'\n')
        f.write("PRIMER_PICK_INTERNAL_OLIGO="+PRIMER_PICK_INTERNAL_OLIGO+'\n')
        f.write("PRIMER_PICK_RIGHT_PRIMER="+PRIMER_PICK_RIGHT_PRIMER+'\n')
        f.write("PRIMER_OPT_SIZE="+PRIMER_OPT_SIZE+'\n')
        f.write("PRIMER_MIN_SIZE="+PRIMER_MIN_SIZE+'\n')
        f.write("PRIMER_MAX_SIZE="+PRIMER_MAX_SIZE+'\n')
        f.write("PRIMER_PRODUCT_SIZE_RANGE="+PRIMER_PRODUCT_SIZE_RANGE_FROM+'-'+PRIMER_PRODUCT_SIZE_RANGE_TO+'\n')
        f.write("PRIMER_EXPLAIN_FLAG="+PRIMER_EXPLAIN_FLAG+'\n')
        f.write("=")

    subprocess.run([f'{pri_exe_path}','--output',f'{pri_output_path}',f'{pri_input_path}'])
    
    blast_left_path="./static/blast/input/primer/blast_left.fasta"
    blast_right_path="./static/blast/input/primer/blast_right.fasta"
    blast_template_path="./static/blast/input/primer/blast_template.fasta"
    blast_lr_path="./static/blast/input/primer/blast_lr.fasta"
    blast_db_path="./static/blast/input/primer/blast_db.fasta"
    blast_out="./static/blast/output/primer/results"
    match1="LEFT"
    match2="RIGHT"
    match3="SEQUENCE_TEMPLATE"
    left=[]
    right=[]
    template=[]
    i1=0
    j=0
    result = ""

    from Bio.Blast.Applications import NcbiblastnCommandline
    from Bio.Blast.Applications import NcbimakeblastdbCommandline
    from Bio.Blast import NCBIXML

    with open(f'{pri_output_path}', 'r') as f2:
        line = f2.readline()
        while line:
            if ((line[14:21] == match3[0:7]) & ((line[7:10]) == match1[0:3])) : 
                left.insert(i1,line[24:])
            elif((line[15:22] == match3[0:7]) & (line[7:11] == match2[0:4])): 
                right.insert(i1,line[25:])
                i1=i1+1
            elif(line[0:16] == match3[0:16]): template=line[18:]
            line=f2.readline()
        while(j<i1):
            f1=open('./static/blast/input/primer/blast_left'+str(j)+'.fasta', 'w')
            f1.write(">LEFT"+str(j)+'\n')
            f1.write(left[j])
            f1.close()

            f1=open('./static/blast/input/primer/blast_right'+str(j)+'.fasta', 'w')
            f1.write(">RIGHT"+str(j)+'\n')
            f1.write(right[j])
            f1.close()

            f1=open('./static/blast/input/primer/blast_template'+str(j)+'.fasta', 'w')
            f1.write(">TEMPLATE"+str(j)+'\n')
            f1.write(template)
            f1.close()

            f1=open('./static/blast/input/primer/blast_lr'+str(j)+'.fasta', 'w')
            f1.write(">LEFT"+str(j)+'\n')
            f1.write(left[j])
            f1.write(">RIGHT"+str(j)+'\n')
            f1.write(right[j])
            f1.close()

            f1=open('./static/blast/input/primer/blast_db'+str(j)+'.fasta', 'w')
            f1.write(">LEFT"+str(j)+'\n')
            f1.write(left[j])
            f1.write(">RIGHT"+str(j)+'\n')
            f1.write(right[j])
            f1.write(">TEMPLATE"+str(j)+'\n')
            f1.write(template)
            f1.close()

            makedb=NcbimakeblastdbCommandline(input_file="./static/blast/input/primer/blast_db"+str(j)+".fasta", dbtype="nucl", out="./static/blast/input/primer/template"+str(j)+".fasta")
            stdout, stderr = makedb()

            # 设置BLAST程序的路径和参数
            blastn_cline = NcbiblastnCommandline(query="./static/blast/input/primer/blast_lr"+str(j)+".fasta", db="./static/blast/input/primer/template"+str(j)+".fasta", outfmt=1, out="./static/blast/output/primer/results"+str(j)+".txt", dust="no", word_size="11")
            stdout, stderr = blastn_cline()
            
            print("BLAST finished")

            

            # 读取BLAST结果文件
            #with open("blast_lr_results0.xml") as blast_file:
                #blast_records = NCBIXML.parse(blast_file)

                #for record in blast_records:
                    # 在这里处理每个比对结果
                    # 可以检查引物与模板的匹配位置、匹配得分等信息
                    # record.query, record.subject, record.query_start, record.query_end, record.subject_start, record.subject_end, record.score, 等等
                    #print(record)

            j=j+1

    


    ## 载体部分
    SEQUENCE = ["GAGATACCTACAGCGTGAGCTATGAGAAAGCGCCACGCTTCCCGAAGGGAGAAAGGCGGACAGGTATCCGGTAAGCGGCAGGGTCGGAACAGGAGAGCGCACGAGGGAGCTTCCAGGGGGAAACGCCTGGTATCTTTATAGTCCTGTCGGGTTTCGCCACCTCTGACTTGAGCGTCGATTTTTGTGATGCTCGTCAGGGGGGCGGAGCCTATGGAAAAACGCCAGCAACGCGGCCTTTTTACGGTTCCTGGCCTTTTGCTGGCCTTTTGCTCACATGTTCTTTCCTGCGTTATCCCCTGATTCTGTGGATAACCGTATTACCGCCTTTGAGTGAGCTGATACCGCTCGCCGCAGCCGAACGACCGAGCGCAGCGAGTCAGTGAGCGAGGAAGCGGAAGAGCGCCCAATACGCAAACCGCCTCTCCCCGCGCGTTGGCCGATTCATTAATGCAGCTGGCACGACAGGTTTCCCGACTGGAAAGCGGGCAGTGAGCGCAACGCAATTAATGTGAGTTAGCTCACTCATTAGGCACCCCAGGCTTTACACTTTATGCTTCCGGCTCGTATGTTGTGTGGAATTGTGAGCGGATAACAATTTCACACAGGAAACAGCTATGACCATGATTACGCCAAGCTTGCATGCCTGCAGGTCGACTCTAGAGGATCCCCGGGTACCGAGCTCGAATTCACTGGCCGTCGTTTTACAACGTCGTGACTGGGAAAACCCTGGCGTTACCCAACTTAATCGCCTTGCAGCACATCCCCCTTTCGCCAGCTGGCGTAATAGCGAAGAGGCCCGCACCGATCGCCCTTCCCAACAGTTGCGCAGCCTGAATGGCGAATGGCGCCTGATGCGGTATTTTCTCCTTACGCATCTGTGCGGTATTTCACACCGCATATGGTGCACTCTCAGTACAATCTGCTCTGATGCCGCATAGTTAAGCCAGCCCCGACACCCGCCAACACCCGCTGACGCGCCCTGACGGGCTTGTCTGCTCCCGGCATCCGCTTACAGACAAGCTGTGACCGTCTCCGGGAGCTGCATGTGTCAGAGGTTTTCACCGTCATCACCGAAACGCGCGAGACGAAAGGGCCTCGTGATACGCCTATTTTTATAGGTTAATGTCATGATAATAATGGTTTCTTAGACGTCAGGTGGCACTTTTCGGGGAAATGTGCGCGGAACCCCTATTTGTTTATTTTTCTAAATACATTCAAATATGTATCCGCTCATGAGACAATAACCCTGATAAATGCTTCAATAATATTGAAAAAGGAAGAGTATGAGTATTCAACATTTCCGTGTCGCCCTTATTCCCTTTTTTGCGGCATTTTGCCTTCCTGTTTTTGCTCACCCAGAAACGCTGGTGAAAGTAAAAGATGCTGAAGATCAGTTGGGTGCACGAGTGGGTTACATCGAACTGGATCTCAACAGCGGTAAGATCCTTGAGAGTTTTCGCCCCGAAGAACGTTTTCCAATGATGAGCACTTTTAAAGTTCTGCTATGTGGCGCGGTATTATCCCGTATTGACGCCGGGCAAGAGCAACTCGGTCGCCGCATACACTATTCTCAGAATGACTTGGTTGAGTACTCACCAGTCACAGAAAAGCATCTTACGGATGGCATGACAGTAAGAGAATTATGCAGTGCTGCCATAACCATGAGTGATAACACTGCGGCCAACTTACTTCTGACAACGATCGGAGGACCGAAGGAGCTAACCGCTTTTTTGCACAACATGGGGGATCATGTAACTCGCCTTGATCGTTGGGAACCGGAGCTGAATGAAGCCATACCAAACGACGAGCGTGACACCACGATGCCTGTAGCAATGGCAACAACGTTGCGCAAACTATTAACTGGCGAACTACTTACTCTAGCTTCCCGGCAACAATTAATAGACTGGATGGAGGCGGATAAAGTTGCAGGACCACTTCTGCGCTCGGCCCTTCCGGCTGGCTGGTTTATTGCTGATAAATCTGGAGCCGGTGAGCGTGGGTCTCGCGGTATCATTGCAGCACTGGGGCCAGATGGTAAGCCCTCCCGTATCGTAGTTATCTACACGACGGGGAGTCAGGCAACTATGGATGAACGAAATAGACAGATCGCTGAGATAGGTGCCTCACTGATTAAGCATTGGTAACTGTCAGACCAAGTTTACTCATATATACTTTAGATTGATTTAAAACTTCATTTTTAATTTAAAAGGATCTAGGTGAAGATCCTTTTTGATAATCTCATGACCAAAATCCCTTAACGTGAGTTTTCGTTCCACTGAGCGTCAGACCCCGTAGAAAAGATCAAAGGATCTTCTTGAGATCCTTTTTTTCTGCGCGTAATCTGCTGCTTGCAAACAAAAAAACCACCGCTACCAGCGGTGGTTTGTTTGCCGGATCAAGAGCTACCAACTCTTTTTCCGAAGGTAACTGGCTTCAGCAGAGCGCAGATACCAAATACTGTTCTTCTAGTGTAGCCGTAGTTAGGCCACCACTTCAAGAACTCTGTAGCACCGCCTACATACCTCGCTCTGCTAATCCTGTTACCAGTGGCTGCTGCCAGTGGCGATAAGTCGTGTCTTACCGGGTTGGACTCAAGACGATAGTTACCGGATAAGGCGCAGCGGTCGGGCTGAACGGGGGGTTCGTGCACACAGCCCAGCTTGGAGCGAACGACCTACACCGAACT",
    "TCAATATTGGCCATTAGCCATATTATTCATTGGTTATATAGCATAAATCAATATTGGCTATTGGCCATTGCATACGTTGTATCTATATCATAATATGTACATTTATATTGGCTCATGTCCAATATGACCGCCATGTTGGCATTGATTATTGACTAGTTATTAATAGTAATCAATTACGGGGTCATTAGTTCATAGCCCATATATGGAGTTCCGCGTTACATAACTTACGGTAAATGGCCCGCCTGGCTGACCGCCCAACGACCCCCGCCCATTGACGTCAATAATGACGTATGTTCCCATAGTAACGCCAATAGGGACTTTCCATTGACGTCAATGGGTGGAGTATTTACGGTAAACTGCCCACTTGGCAGTACATCAAGTGTATCATATGCCAAGTCCGCCCCCTATTGACGTCAATGACGGTAAATGGCCCGCCTGGCATTATGCCCAGTACATGACCTTACGGGACTTTCCTACTTGGCAGTACATCTACGTATTAGTCATCGCTATTACCATGGTGATGCGGTTTTGGCAGTACACCAATGGGCGTGGATAGCGGTTTGACTCACGGGGATTTCCAAGTCTCCACCCCATTGACGTCAATGGGAGTTTGTTTTGGCACCAAAATCAACGGGACTTTCCAAAATGTCGTAACAACTGCGATCGCCCGCCCCGTTGACGCAAATGGGCGGTAGGCGTGTACGGTGGGAGGTCTATATAAGCAGAGCTCGTTTAGTGAACCGTCAGATCACTAGAAGCTTTATTGCGGTAGTTTATCACAGTTAAATTGCTAACGCAGTCAGTGCTTCTGACACAACAGTCTCGAACTTAAGCTGCAGTGACTCTCTTAAGGTAGCCTTGCAGAAGTTGGTCGTGAGGCACTGGGCAGGTAAGTATCAAGGTTACAAGACAGGTTTAAGGAGACCAATAGAAACTGGGCTTGTCGAGACAGAGAAGACTCTTGCGTTTCTGATAGGCACCTATTGGTCTTACTGACATCCACTTTGCCTTTCTCTCCACAGGTGTCCACTCCCAGTTCAATTACAGCTCTTAAGGCTAGAGTACTTAATACGACTCACTATAGGCTAGCCAGCTTGAAGCAAGCCTCCTGAAAGATGAAGCTACTGTCTTCTATCGAACAAGCATGCGATATTTGCCGACTTAAAAAGCTCAAGTGCTCCAAAGAAAAACCGAAGTGCGCCAAGTGTCTGAAGAACAACTGGGAGTGTCGCTACTCTCCCAAAACCAAAAGGTCTCCGCTGACTAGGGCACATCTGACAGAAGTGGAATCAAGGCTAGAAAGACTGGAACAGCTATTTCTACTGATTTTTCCTCGAGAAGACCTTGACATGATTTTGAAAATGGATTCTTTACAGGATATAAAAGCATTGTTAACAGGATTATTTGTACAAGATAATGTGAATAAAGATGCCGTCACAGATAGATTGGCTTCAGTGGAGACTGATATGCCTCTAACATTGAGACAGCATAGAATAAGTGCGACATCATCATCGGAAGAGAGTAGTAACAAAGGTCAAAGACAGTTGACTGTATCGCCGGAATTCCCGGGGATCCGTCGACTTGACGCGTTGATATCATCTAGAGCGGCCGCAGGTACCTGAATAACTAAGGCCGCTTCCCTTTAGTGAGGGTTAATGCTTCGAGCAGACATGATAAGATACATTGATGAGTTTGGACAAACCACAACTAGAATGCAGTGAAAAAAATGCTTTATTTGTGAAATTTGTGATGCTATTGCTTTATTTGTAACCATTATAAGCTGCAATAAACAAGTTAACAACAACAATTGCATTCATTTTATGTTTCAGGTTCAGGGGGAGATGTGGGAGGTTTTTTAAAGCAAGTAAAACCTCTACAAATGTGGTAAAATCCGATAAGGATCGATCCGGGCTGGCGTAATAGCGAAGAGGCCCGCACCGATCGCCCTTCCCAACAGTTGCGCAGCCTGAATGGCGAATGGACGCGCCCTGTAGCGGCGCATTAAGCGCGGCGGGTGTGGTGGTTACGCGCAGCGTGACCGCTACACTTGCCAGCGCCCTAGCGCCCGCTCCTTTCGCTTTCTTCCCTTCCTTTCACGCCACGTTCGCCGGCTTTCCCCGTCAAGCTCTAAATCGGGGGCTCCCTTTAGGGTTCCGATTTAGTGCTTTACGGCACCTCGACCCCAAAAAACTTGATTAGGGTGATGGTTCACGTAGTGGGCCATCGCCCTGATAGACGGTTTTTCGCCCTTTGACGTTGGAGTCCACGTTCTTTAATAGTGGACTCTTGTTCCAAACTGGAACAACACTCAACCCTATCTCGGTCTATTCTTTTGATTTATAAGGGATTTTGCCGATTTCGGCCTATTGGTTAAAAAATGAGCTGATTTAACAAAAATTTAACGCGAATTTTAACAAAATATTAACGCTTACAATTTCCTGATGCGGTATTTTCTCCTTACGCATCTGTGCGGTATTTCACACCGCATACGCGGATCTTCCGTACCTTCTGAGGCGGAAAGAACCAGCTGTGGAATGTGTGTCAGTTAGGGTGTGGAAAGTCCCCAGGCTCCCCAGCAGGCAGAAGTATGCAAAGCATGCATCTCAATTAGTCAGCAACCAGGTGTGGAAAGTCCCCAGGCTCCCCAGCAGGCAGAAGTATGCAAAGCATGCATCTCAATTAGTCAGCAACCATAGTCCCGCCCCTAACTCCGCCCATCCCGCCCCTAACTCCGCCCAGTTCCGCCCATTCTCCGCCCCATGGCTGACTAATTTTTTTTATTTATGCAGAGGCCGAGGCCGCCTCGGCCTCTGAGCTATTCCAGAAGTAGTGAGGAGGCTTTTTTGGAGGCCTAGGCTTTTGCAAAAAGCTTGATTCTTCTGACACAACAGTCTCGAACTTAAGGCTAGAATTCTGGCTACAGGTAAGCGCCCCTAAAATCCCTTTGGGCACAATGTGTCCTGAGGGGAGAGGCAGCGACCTGTAGATGGGACGGGGGCACTAACCCTCAGGTTTGGGGCTTCTGAATGTGAGTATCGCCATGTAAGCCCAGTATTTGGCCAATCTCAGAAAGCTCCTGGTCCCTGGAGGGATGGAGAGAGAAAAACAAACAGCTCCTGGAGCAGGGAGAGTGCTGGCCTCTTGCTCTCCGGCTCCCTCTGTTGCCCTCTGGTTTCTCCCCAGGCTCCCGGACGTCCTCTAGCCACCATGACTTCGAAAGTTTATGATCCAGAACAAAGGAAACGGATGATAACTGGTCCGCAGTGGTGGGCCAGATGTAAACAAATGAATGTTCTTGATTCATTTATTAATTATTATGATTCAGAAAAACATGCAGAAAATGCTGTTATTTTTTTACATGGTAACGCGGCCTCTTCTTATTTATGGCGACATGTTGTGCCACATATTGAGCCAGTAGCGCGGTGTATTATACCAGACCTTATTGGTATGGGCAAATCAGGCAAATCTGGTAATGGTTCTTATAGGTTACTTGATCATTACAAATATCTTACTGCATGGTTTGAACTTCTTAATTTACCAAAGAAGATCATTTTTGTCGGCCATGATTGGGGTGCTTGTTTGGCATTTCATTATAGCTATGAGCATCAAGATAAGATCAAAGCAATAGTTCACGCTGAAAGTGTAGTAGATGTGATTGAATCATGGGATGAATGGCCTGATATTGAAGAAGATATTGCGTTGATCAAATCTGAAGAAGGAGAAAAAATGGTTTTGGAGAATAACTTCTTCGTGGAAACCATGTTGCCATCAAAAATCATGAGAAAGTTAGAACCAGAAGAATTTGCAGCATATCTTGAACCATTCAAAGAGAAAGGTGAAGTTCGTCGTCCAACATTATCATGGCCTCGTGAAATCCCGTTAGTAAAAGGTGGTAAACCTGACGTTGTACAAATTGTTAGGAATTATAATGCTTATCTACGTGCAAGTGATGATTTACCAAAAATGTTTATTGAATCGGACCCAGGATTCTTTTCCAATGCTATTGTTGAAGGTGCCAAGAAGTTTCCTAATACTGAATTTGTCAAAGTAAAAGGTCTTCATTTTTCGCAAGAAGATGCACCTGATGAAATGGGAAAATATATCAAATCGTTCGTTGAGCGAGTTCTCAAAAATGAACAATAATTCTAGCCCTGAATAAGTGATAATAAGCGGATGAATGGCAGAAATTCGTCGAAGCGCAATAAAATATCTTTATTTTCATTACATCTGTGTGTTGGTTTTTTGTGTGAATCGATAGCGATAAGGATCGGAAGATCCGCGTATGGTGCACTCTCAGTACAATCTGCTCTGATGCCGCATAGTTAAGCCAGCCCCGACACCCGCCAACACCCGCTGACGCGCCCTGACGGGCTTGTCTGCTCCCGGCATCCGCTTACAGACAAGCTGTGACCGTCTCCGGGAGCTGCATGTGTCAGAGGTTTTCACCGTCATCACCGAAACGCGCGAGACGAAAGGGCCTCGTGATACGCCTATTTTTATAGGTTAATGTCATGATAATAATGGTTTCTTAGACGTCAGGTGGCACTTTTCGGGGAAATGTGCGCGGAACCCCTATTTGTTTATTTTTCTAAATACATTCAAATATGTATCCGCTCATGAGACAATAACCCTGATAAATGCTTCAATAATATTGAAAAAGGAAGAGTATGAGTATTCAACATTTCCGTGTCGCCCTTATTCCCTTTTTTGCGGCATTTTGCCTTCCTGTTTTTGCTCACCCAGAAACGCTGGTGAAAGTAAAAGATGCTGAAGATCAGTTGGGTGCACGAGTGGGTTACATCGAACTGGATCTCAACAGCGGTAAGATCCTTGAGAGTTTTCGCCCCGAAGAACGTTTTCCAATGATGAGCACTTTTAAAGTTCTGCTATGTGGCGCGGTATTATCCCGTGTTGACGCCGGGCAAGAGCAACTCGGTCGCCGCATACACTATTCTCAGAATGACTTGGTTGAGTACTCACCAGTCACAGAAAAGCATCTTACGGATGGCATGACAGTAAGAGAATTATGCAGTGCTGCCATAACCATGAGTGATAACACTGCGGCCAACTTACTTCTGACAACGATCGGAGGACCGAAGGAGCTAACCGCTTTTTTGCACAACATGGGGGATCATGTAACTCGCCTTGATCGTTGGGAACCGGAGCTGAATGAAGCCATACCAAACGACGAGCGTGACACCACGATGCCTGTAGCAATGGCAACAACGTTGCGCAAACTATTAACTGGCGAACTACTTACTCTAGCTTCCCGGCAACAATTAATAGACTGGATGGAGGCGGATAAAGTTGCAGGACCACTTCTGCGCTCGGCCCTTCCGGCTGGCTGGTTTATTGCTGATAAATCTGGAGCCGGTGAGCGTGGGTCTCGCGGTATCATTGCAGCACTGGGGCCAGATGGTAAGCCCTCCCGTATCGTAGTTATCTACACGACGGGGAGTCAGGCAACTATGGATGAACGAAATAGACAGATCGCTGAGATAGGTGCCTCACTGATTAAGCATTGGTAACTGTCAGACCAAGTTTACTCATATATACTTTAGATTGATTTAAAACTTCATTTTTAATTTAAAAGGATCTAGGTGAAGATCCTTTTTGATAATCTCATGACCAAAATCCCTTAACGTGAGTTTTCGTTCCACTGAGCGTCAGACCCCGTAGAAAAGATCAAAGGATCTTCTTGAGATCCTTTTTTTCTGCGCGTAATCTGCTGCTTGCAAACAAAAAAACCACCGCTACCAGCGGTGGTTTGTTTGCCGGATCAAGAGCTACCAACTCTTTTTCCGAAGGTAACTGGCTTCAGCAGAGCGCAGATACCAAATACTGTTCTTCTAGTGTAGCCGTAGTTAGGCCACCACTTCAAGAACTCTGTAGCACCGCCTACATACCTCGCTCTGCTAATCCTGTTACCAGTGGCTGCTGCCAGTGGCGATAAGTCGTGTCTTACCGGGTTGGACTCAAGACGATAGTTACCGGATAAGGCGCAGCGGTCGGGCTGAACGGGGGGTTCGTGCACACAGCCCAGCTTGGAGCGAACGACCTACACCGAACTGAGATACCTACAGCGTGAGCTATGAGAAAGCGCCACGCTTCCCGAAGGGAGAAAGGCGGACAGGTATCCGGTAAGCGGCAGGGTCGGAACAGGAGAGCGCACGAGGGAGCTTCCAGGGGGAAACGCCTGGTATCTTTATAGTCCTGTCGGGTTTCGCCACCTCTGACTTGAGCGTCGATTTTTGTGATGCTCGTCAGGGGGGCGGAGCCTATGGAAAAACGCCAGCAACGCGGCCTTTTTACGGTTCCTGGCCTTTTGCTGGCCTTTTGCTCACATGGCTCGACAGATCT",
    "GCGCCCAATACGCAAACCGCCTCTCCCCGCGCGTTGGCCGATTCATTAATGCAGCTGGCACGACAGGTTTCCCGACTGGAAAGCGGGCAGTGAGCGCAACGCAATTAATGTGAGTTAGCTCACTCATTAGGCACCCCAGGCTTTACACTTTATGCTTCCGGCTCGTATGTTGTGTGGAATTGTGAGCGGATAACAATTTCACACAGGAAACAGCTATGACCATGATTACGCCAAGCTTTTCATAGGGTAGGGGAATTTCGGGCATGCCGGTAGAGGTGTGGTCAATAAGAGCGACCTCATGCTATACCTGAGAAAGCAACCTGACCTACAGGAAAGAGTTACTCAAGAACAAGAATTTTCGTTTTAAAACCTAAGAGTCACTTTAAAATTTGTATACACTTATTTTTTTTATAACTTATTTAATAATAAAAATCATAAATCATAAGAAATTCGCTTATTTAGAAGTGTCAACAACGTATCTACCAACGATTTGACCCTTTTCCATCTTTTCGTAAATTTCTGGCAAGGTAGACAAGCCGACAACCTTGATTGGAGACTTGACCAAACCTCTGGCGAAGAAGTCCAAAGCTTGCATGCCTGCAGGTCGACTCTAGAGGATCCCCTTTCAAAAATTCTTACTTTTTTTTTGGATGGACGCAAAGAAGTTTAATAATCATATTACATGGCATTACCACCATATACATATCCATATACATATCCATATCTAATCTTACTTATATGTTGTGGAAATGTAAAGAGCCCCATTATCTTAGCCTAAAAAAACCTTCTCTTTGGAACTTTCAGTAATACGCTTAACTGCTCATTGCTATATTGAAGTACGGATTAGAAGCCGCCGAGCGGGTGACAGCCCTCCGAAGGAAGACTCTCCTCCGTGCGTCCTCGTCTTCACCGGTCGCGTTCCTGAAACGCAGATGTGCCTCGCGCCGCACTGCTCCGAACAATAAAGATTCTACAATACTAGCTTTTATGGTTATGAAGAGGAAAAATTGGCAGTAACCTGGCCCCACAAACCTTCAAATGAACGAATCAAATTAACAACCATAGGATGATAATGCGATTAGTTTTTTAGCCTTATTTCTGGGGTAATTAATCAGCGAAGCGATGATTTTTGATCTATTAACAGATATATAAATGCAAAAACTGCATAACCACTTTAACTAATACTTTCAACATTTTCGGTTTGTATTACTTCTTATTCAAATGTAATAAAAGTATCAACAAAAAATTGTTAATATACCTCTATACTTTAACGTCAAGGAGAAAAAACCCGGGTACCGAGCTCGAATTCGACACTTCTAAATAAGCGGATCTCCTATGCCTTCACGATTTATAGTTTCCATTATCAAGTATGCCTATATTAGTATATAGCATCTTTAGATGACAGTGTTCGAAGTTTCACGAATAAAAGATAATATTCTACTTTTTGCTCCCACCGCGTTTGCTAGCACGAGTGAACACCATCCCTCGCCTGTGAGTTGTACCCATTCCTCTAAACTGTAGACATGGTAGCTTCAGCAGTGTTCGTTATGTACGGCATCCTCCAACAAACAGTCGGTTATAGTTTGTCCTGCTCCTCTGAATCGTCTCCCTCGATATTTCTCATTTTCCTTCGCATGCCCTCGAGCGGAACGAAGCATCTGTGCTTCATTTTGTAGAACAAAAATGCAACGCGAGAGCGCTAATTTTTCAAACAAAGAATCTGAGCTGCATTTTTACAGAACAGAAATGCAACGCGAAAGCGCTATTTTACCAACGAAGAATCTGTGCTTCATTTTTGTAAAACAAAAATGCAACGCGAGAGCGCTAATTTTTCAAACAAAGAATCTGAGCTGCATTTTTACAGAACAGAAATGCAACGCGAGAGCGCTATTTTACCAACAAAGAATCTATACTTCTTTTTTGTTCTACAAAAATGCATCCCGAGAGCGCTATTTTTCTAACAAAGCATCTTAGATTACTTTTTTTCTCCTTTGTGCGCTCTATAATGCAGTCTCTTGATAACTTTTTGCACTGTAGGTCCGTTAAGGTTAGAAGAAGGCTACTTTGGTGTCTATTTTCTCTTCCATAAAAAAAGCCTGACTCCACTTCCCGCGTTTACTGATTACTAGCGAAGCTGCGGGTGCATTTTTTCAAGATAAAGGCATCCCCGATTATATTCTATACCGATGTGGATTGCGCATACTTTGTGAACAGAAAGTGATAGCGTTGATGATTCTTCATTGGTCAGAAAATTATGAACGGTTTCTTCTATTTTGTCTCTATATACTACGTATAGGAAATGTTTACATTTTCGTATTGTTTTCGATTCACTCTATGAATAGTTCTTACTACAATTTTTTTGTCTAAAGAGTAATACTAGAGATAAACATAAAAAATGTAGAGGTCGAGTTTAGATGCAAGTTCAAGGAGCGAAAGGTGGATGGGTAGGTTATATAGGGATATAGCACAGAGATATATAGCAAAGAGATACTTTTGAGCAATGTTTGTGGAAGCGGTATTCGCAATATTTTAGTAGCTCGTTACAGTCCGGTGCGTTTTTGGTTTTTTGAAAGTGCGTCTTCAGAGCGCTTTTGGTTTTCAAAAGCGCTCTGAAGTTCCTATACTTTCTAGCTAGAGAATAGGAACTTCGGAATAGGAACTTCAAAGCGTTTCCGAAAACGAGCGCTTCCGAAAATGCAACGCGAGCTGCGCACATACAGCTCACTGTTCACGTCGCACCTATATCTGCGTGTTGCCTGTATATATATATACATGAGAAGAACGGCATAGTGCGTGTTTATGCTTAAATGCGTACTTATATGCGTCTATTTATGTAGGATGAAAGGTAGTCTAGTACCTCCTGTGATATTATCCCATTCCATGCGGGGTATCGTATGCTTCCTTCAGCACTACCCTTTAGCTGTTCTATATGCTGCCACTCCGATCTTATGTATGAAATTCTTAAAAAAGGACACCTGTAAGCGTTGATTTCTATGTATGAAGTCCACATTTGATGTAATCATAACAAAGCCTAAAAAATAGGTATATCATTTTATAATTATTTGCTGTACAAGTATATCAATAAACTTATATATTACTTGTTTTCTAGATAAGCTTCGTAACCGACAGTTTCTAACTTTTGTGCTTTGACAAGAACTTCTTCTTCTTGCTTTAATAAAAACTGTTCCATTTTCGTTGTATAACTTGAATCATAAGCGCCAAGCAGTCTGACAGCCAACAGCGCAGCGTTCGTACTATTATTAATAGCGACGGTAGCTACTGGAACACCTCTAGGCATTTGCACAATTGAATGTAAAGAATCTACTCCATCTAGACAAGAACCTTTTACGGGCACACCGATGACAGGAAGTGGTGTCATTGCAGCCACCATACCTGGCAAGTGAGCAGCCCCACCAGCTCCAGCGATAATTGTTTTAATTCCACGCTTGCTTGCGGAAATAGCATATGCTGACATCCTATGTGGAGTTCTATGAGCAGAGACTATTGTCACTTCAAATGGAACGCCAAAATCTTTTAAAACCGCACATGCGGCAGACATTACCGGCAAGTCAGAGTCTGATCCCATGATGATTCCAACCAATGGTTTGACCATTGCTTCCAAGTCCAACTTTTGAGCGACAGAGATTTTGATTGGAATATCAGTTCTACCTGTAATGTAGTTCAGCCTTTGTTCACATTCCGCCATACTGGAGGCAATAATATTTATGTGACCTACTTTTCTGTTAGGTCTAGACTCTTTTCCATATAAGTACACTGAGGAACCTGGAGTCGCCAATGCTCTTTCGCAAGTTTCTAGCTCTTTATCTTTTGTATGTTTGTCTCCAAGAACATTTAGCATAATGGCGTTCGTTGTAATGGTGGAGAAAGATGTGAAATTCTTTGGCATTGGCAAATCCAATATTGATCTCAAATGAGCTTCAAATTGAGAAGTGACGCAAGCATCAATGGTATAATGTCCAGAGTTGTGAGGCCTTGGGGCAATTTCGTTAATAAGCAATTCCCCTGTTTCTAAATAGAACATTTCCACACCAAATATACCACAACCGGGAAAAGATTTGATTGCATTTTCTGCCAACAACTTCGCCTTAAGTTGAACGGAGTCCGGAACTCTAGCAGGCGCATAACATAAGTCACAAATATTGTCCTTGTGGATAGTCTCTACAATTGGGTAAGAAAACACTAAACCGTTAACAGACCTCACAATCATGACTGCTAATTCTTTAGTAAATGGTGCCCATTTTTCGGCGTACAAAGGACGATCCTTCAGTACTTCCAAAGCTTCCGGAATCATTTCCTTATTCTTTACAACGAAGTTACCTCTTCCATCGTATGCCAAAGTCCTCGACTTCAAGACGAATGGAAAACCCAAATCTCTTCCAACATTCAATAGGGACGTCTCACTGGCTTGTTCCACAGGAACACTTTGGGTAACTGCTATACCATTTTTGATTAAATGCTCTTTTTGAATATATTTGTCTTGTATCAATCTGATTGTTTCTGGAGAAGGGTAAATTTTTAATTTGGGATGTTTTACTTGAAGATTCTTTAGTGTAGGAACATCAACATGCTCAATCTCAATCGTTAGCACATCACATTTTTCAGCTAGTTTTTCGATATCAAGAGGATTGGAAAAGGAGCCATTAACGTGGTCATTGGAGTTGCTTATTTGTTTGGCAGGAGAATTTTCAGCATCTAGTATTACCGTCTTAATGTTGAGCCTGTTTGCTGCCTCAACAATCATACGTCCCAATTGTCCCCCTCCTAATATACCAACTGTTCTAGAATCCATACTTGATTGTTTTGTCCGATTTTCTTGTTTTTCTTGATTGTTATAGTAGGATGTACTTAGAAGAGAGATCCAACGATTTTACGCACCAATTTATACATGAAATGCTCCATAATATTGTCCATTTAGTTCTTAATAAAAGGTCAGCAAGAGTCAATCACTTAGTATTACCCGGTTCGTAGCCATGCAACAAGAGTCATTTGTCAGCATAGCTGTAATAATCAATCATGACGTAAGAAATGTATCATAATTAAAAGTTGTTAAAGATGTCAGTGTTATGTTGGTGTTACAAAATTCTCGGCTTCTCACTAATATTTAATATCTCTTAAATTTTATCTGTCTTTGATTCTTTTAAGAAAAGTTATGTATTATTCAAGAAAAAGTCAATTCAGATCCAGGTGGCACTTTTCGGGGAAATGTGCGCGGAACCCCTATTTGTTTATTTTTCTAAATACATTCAAATATGTATCCGCTCATGAGACAATAACCCTGATAAATGCTTCAATAATATTGAAAAAGGAAGAGTATGAGTATTCAACATTTCCGTGTCGCCCTTATTCCCTTTTTTGCGGCATTTTGCCTTCCTGTTTTTGCTCACCCAGAAACGCTGGTGAAAGTAAAAGATGCTGAAGATCAGTTGGGTGCACGAGTGGGTTACATCGAACTGGATCTCAACAGCGGTAAGATCCTTGAGAGTTTTCGCCCCGAAGAACGTTTTCCAATGATGAGCACTTTTAAAGTTCTGCTATGTGGCGCGGTATTATCCCGTATTGACGCCGGGCAAGAGCAACTCGGTCGCCGCATACACTATTCTCAGAATGACTTGGTTGAGTACTCACCAGTCACAGAAAAGCATCTTACGGATGGCATGACAGTAAGAGAATTATGCAGTGCTGCCATAACCATGAGTGATAACACTGCGGCCAACTTACTTCTGACAACGATCGGAGGACCGAAGGAGCTAACCGCTTTTTTGCACAACATGGGGGATCATGTAACTCGCCTTGATCGTTGGGAACCGGAGCTGAATGAAGCCATACCAAACGACGAGCGTGACACCACGATGCCTGTAGCAATGGCAACAACGTTGCGCAAACTATTAACTGGCGAACTACTTACTCTAGCTTCCCGGCAACAATTAATAGACTGGATGGAGGCGGATAAAGTTGCAGGACCACTTCTGCGCTCGGCCCTTCCGGCTGGCTGGTTTATTGCTGATAAATCTGGAGCCGGTGAGCGTGGGTCTCGCGGTATCATTGCAGCACTGGGGCCAGATGGTAAGCCCTCCCGTATCGTAGTTATCTACACGACGGGGAGTCAGGCAACTATGGATGAACGAAATAGACAGATCGCTGAGATAGGTGCCTCACTGATTAAGCATTGGTAACTGTCAGACCAAGTTTACTCATATATACTTTAGATTGATTTAAAACTTCATTTTTAATTTAAAAGGATCTAGGTGAAGATCCTTTTTGATAATCTCATGACCAAAATCCCTTAACGTGAGTTTTCGTTCCACTGAGCGTCAGACCCCGTAGAAAAGATCAAAGGATCTTCTTGAGATCCTTTTTTTCTGCGCGTAATCTGCTGCTTGCAAACAAAAAAACCACCGCTACCAGCGGTGGTTTGTTTGCCGGATCAAGAGCTACCAACTCTTTTTCCGAAGGTAACTGGCTTCAGCAGAGCGCAGATACCAAATACTGTCCTTCTAGTGTAGCCGTAGTTAGGCCACCACTTCAAGAACTCTGTAGCACCGCCTACATACCTCGCTCTGCTAATCCTGTTACCAGTGGCTGCTGCCAGTGGCGATAAGTCGTGTCTTACCGGGTTGGACTCAAGACGATAGTTACCGGATAAGGCGCAGCGGTCGGGCTGAACGGGGGGTTCGTGCACACAGCCCAGCTTGGAGCGAACGACCTACACCGAACTGAGATACCTACAGCGTGAGCTATGAGAAAGCGCCACGCTTCCCGAAGGGAGAAAGGCGGACAGGTATCCGGTAAGCGGCAGGGTCGGAACAGGAGAGCGCACGAGGGAGCTTCCAGGGGGAAACGCCTGGTATCTTTATAGTCCTGTCGGGTTTCGCCACCTCTGACTTGAGCGTCGATTTTTGTGATGCTCGTCAGGGGGGCGGAGCCTATGGAAAAACGCCAGCAACGCGGCCTTTTTACGGTTCCTGGCCTTTTGCTGGCCTTTTGCTCACATGTTCTTTCCTGCGTTATCCCCTGATTCTGTGGATAACCGTATTACCGCCTTTGAGTGAGCTGATACCGCTCGCCGCAGCCGAACGACCGAGCGCAGCGAGTCAGTGAGCGAGGAAGCGGAAGA",
    "CTCAGAAGACCGAGGGCTATTGAGACTTTTCAACAAAGGGTAATATCGGGAAACCTCCTCGGATTCCATTGCCCAGCTATCTGTCACTTATCGAAAGGACAGTAGAAAAGGAAGGTGGCTCCTACAAATGCCATCATTGCGATAAAGGAAAGGCTATCGTTCAAGATGCCTCTACCGACAGTGGTCCCAAAGATGGACCCCCACCCACGAGGAACATCGTGGAAAAAGAAGACGTTCCAACCACGTCTTCAAAGCAAGTGGATTGATGTGATATCTCCACTGACGTAAGGGATGACGCACAATCCCACTATCCTTCGCAAGACCCTTCCTCTATATAAGGAAGTTCATTTCATTTGGAGAGGACAGGCTTCTTGAGATCCTTCAACAATTACCAACAACAACAAACAACAAACAACATTACAATTACTATTTACAATTACAGTCGACTCTAGAGGATCCATGGTGAGCAAGGGCGAGGAGCTGTTCACCGGGGTGGTGCCCATCCTGGTCGAGCTGGACGGCGACGTAAACGGCCACAAGTTCAGCGTGTCCGGCGAGGGCGAGGGCGATGCCACCTACGGCAAGCTGACCCTGAAGTTCATCTGCACCACCGGCAAGCTGCCCGTGCCCTGGCCCACCCTCGTGACCACCCTGACCTACGGCGTGCAGTGCTTCAGCCGCTACCCCGACCACATGAAGCAGCACGACTTCTTCAAGTCCGCCATGCCCGAAGGCTACGTCCAGGAGCGCACCATCTTCTTCAAGGACGACGGCAACTACAAGACCCGCGCCGAGGTGAAGTTCGAGGGCGACACCCTGGTGAACCGCATCGAGCTGAAGGGCATCGACTTCAAGGAGGACGGCAACATCCTGGGGCACAAGCTGGAGTACAACTACAACAGCCACAACGTCTATATCATGGCCGACAAGCAGAAGAACGGCATCAAGGTGAACTTCAAGATCCGCCACAACATCGAGGACGGCAGCGTGCAGCTCGCCGACCACTACCAGCAGAACACCCCCATCGGCGACGGCCCCGTGCTGCTGCCCGACAACCACTACCTGAGCACCCAGTCCGCCCTGAGCAAAGACCCCAACGAGAAGCGCGATCACATGGTCCTGCTGGAGTTCGTGACCGCCGCCGGGATCACTCACGGCATGGACGAGCTGTACAAGTAAAGCGGCCGCCCGGCTGCAGATCGTTCAAACATTTGGCAATAAAGTTTCTTAAGATTGAATCCTGTTGCCGGTCTTGCGATGATTATCATATAATTTCTGTTGAATTACGTTAAGCATGTAATAATTAACATGTAATGCATGACGTTATTTATGAGATGGGTTTTTATGATTAGAGTCCCGCAATTATACATTTAATACGCGATAGAAAACAAAATATAGCGCGCAAACTAGGATAAATTATCGCGCGCGGTGTCATCTATGTTACTAGATCCGATGATAAGCTGTCAAACATGAGAATTCGTAATCATGTCATAGCTGTTTCCTGTGTGAAATTGTTATCCGCTCACAATTCCACACAACATACGAGCCGGAAGCATAAAGTGTAAAGCCTGGGGTGCCTAATGAGTGAGCTAACTCACATTAATTGCGTTGCGCTCACTGCCCGCTTTCCAGTCGGGAAACCTGTCGTGCCAGCTGCATTAATGAATCGGCCAACGCGCGGGGAGAGGCGGTTTGCGTATTGGGCGCTCTTCCGCTTCCTCGCTCACTGACTCGCTGCGCTCGGTCGTTCGGCTGCGGCGAGCGGTATCAGCTCACTCAAAGGCGGTAATACGGTTATCCACAGAATCAGGGGATAACGCAGGAAAGAACATGTGAGCAAAAGGCCAGCAAAAGGCCAGGAACCGTAAAAAGGCCGCGTTGCTGGCGTTTTTCCATAGGCTCCGCCCCCCTGACGAGCATCACAAAAATCGACGCTCAAGTCAGAGGTGGCGAAACCCGACAGGACTATAAAGATACCAGGCGTTTCCCCCTGGAAGCTCCCTCGTGCGCTCTCCTGTTCCGACCCTGCCGCTTACCGGATACCTGTCCGCCTTTCTCCCTTCGGGAAGCGTGGCGCTTTCTCATAGCTCACGCTGTAGGTATCTCAGTTCGGTGTAGGTCGTTCGCTCCAAGCTGGGCTGTGTGCACGAACCCCCCGTTCAGCCCGACCGCTGCGCCTTATCCGGTAACTATCGTCTTGAGTCCAACCCGGTAAGACACGACTTATCGCCACTGGCAGCAGCCACTGGTAACAGGATTAGCAGAGCGAGGTATGTAGGCGGTGCTACAGAGTTCTTGAAGTGGTGGCCTAACTACGGCTACACTAGAAGAACAGTATTTGGTATCTGCGCTCTGCTGAAGCCAGTTACCTTCGGAAAAAGAGTTGGTAGCTCTTGATCCGGCAAACAAACCACCGCTGGTAGCGGTGGTTTTTTTGTTTGCAAGCAGCAGATTACGCGCAGAAAAAAAGGATCTCAAGAAGATCCTTTGATCTTTTCTACGGGGTCTGACGCTCAGTGGAACGAAAACTCACGTTAAGGGATTTTGGTCATGAGATTATCAAAAAGGATCTTCACCTAGATCCTTTTAAATTAAAAATGAAGTTTTAAATCAATCTAAAGTATATATGAGTAAACTTGGTCTGACAGTTACCAATGCTTAATCAGTGAGGCACCTATCTCAGCGATCTGTCTATTTCGTTCATCCATAGTTGCCTGACTCCCCGTCGTGTAGATAACTACGATACGGGAGGGCTTACCATCTGGCCCCAGTGCTGCAATGATACCGCGAGACCCACGCTCACCGGCTCCAGATTTATCAGCAATAAACCAGCCAGCCGGAAGGGCCGAGCGCAGAAGTGGTCCTGCAACTTTATCCGCCTCCATCCAGTCTATTAATTGTTGCCGGGAAGCTAGAGTAAGTAGTTCGCCAGTTAATAGTTTGCGCAACGTTGTTGCCATTGCTACAGGCATCGTGGTGTCACGCTCGTCGTTTGGTATGGCTTCATTCAGCTCCGGTTCCCAACGATCAAGGCGAGTTACATGATCCCCCATGTTGTGCAAAAAAGCGGTTAGCTCCTTCGGTCCTCCGATCGTTGTCAGAAGTAAGTTGGCCGCAGTGTTATCACTCATGGTTATGGCAGCACTGCATAATTCTCTTACTGTCATGCCATCCGTAAGATGCTTTTCTGTGACTGGTGAGTACTCAACCAAGTCATTCTGAGAATAGTGTATGCGGCGACCGAGTTGCTCTTGCCCGGCGTCAATACGGGATAATACCGCGCCACATAGCAGAACTTTAAAAGTGCTCATCATTGGAAAACGTTCTTCGGGGCGAAAACTCTCAAGGATCTTACCGCTGTTGAGATCCAGTTCGATGTAACCCACTCGTGCACCCAACTGATCTTCAGCATCTTTTACTTTCACCAGCGTTTCTGGGTGAGCAAAAACAGGAAGGCAAAATGCCGCAAAAAAGGGAATAAGGGCGACACGGAAATGTTGAATACTCATACTCTTCCTTTTTCAATATTATTGAAGCATTTATCAGGGTTATTGTCTCATGAGCGGATACATATTTGAATGTATTTAGAAAAATAAACAAATAGGGGTTCCGCGCACATTTCCCCGAAAAGTGCCACCTGACGTCTAAGAAACCATTATTATCATGACATTAACCTATAAAAATAGGCGTATCACGAGGCCCTTTCGTCTCGCGCGTTTCGGTGATGACGGTGAAAACCTCTGACACATGCAGCTCCCGGAGACGGTCACAGCTTGTCTGTAAGCGGATGCCGGGAGCAGACAAGCCCGTCAGGGCGCGTCAGCGGGTGTTGGCGGGTGTCGGGGCTGGCTTAACTATGCGGCATCAGAGCAGATTGTACTGAGAGTGCACCATATGCGGTGTGAAATACCGCACAGATGCGTAAGGAGAAAATACCGCATCAGGCGCCATTCGCCATTCAGGCTGCGCAACTGTTGGGAAGGGCGATCGGTGCGGGCCTCTTCGCTATTACGCCAGCTGGCGAAAGGGGGATGTGCTGCAAGGCGATTAAGTTGGGTAACGCCAGGGTTTTCCCAGTCACGACGTTGTAAAACGACGGCCAGTGCCAAGCTTGCATGCCTGCAGGTCGATCTAGAGGATCCCCC"]
    SEQUENCE_ID = "carrier_design"
    SEQUENCE_TEMPLATE = str(request.form.get('carrier_item'))
    PRIMER_TASK = "pick_cloning_primers"
    PRIMER_PICK_LEFT_PRIMER = "1"
    PRIMER_PICK_INTERNAL_OLIGO = "0"
    PRIMER_PICK_RIGHT_PRIMER = "1"
    PRIMER_OPT_SIZE = "20"
    PRIMER_MIN_SIZE = "18"
    PRIMER_MAX_SIZE = "25"
    PRIMER_PRODUCT_SIZE_RANGE_FROM = "75"
    PRIMER_PRODUCT_SIZE_RANGE_TO = "10000"
    PRIMER_EXPLAIN_FLAG = "1"
    insertion = int(str(request.form.get('carrier_pos')))
    SEQUENCE_TEMPLATE = SEQUENCE[int(SEQUENCE_TEMPLATE)][insertion:] + SEQUENCE[int(SEQUENCE_TEMPLATE)][0:insertion-1]


    pri_in_carrier="./primer3/carrier/primer_in.txt"
    pri_out_carrier="./primer3/carrier/primer_out.txt"
    pri_exe_path="./primer3/src/primer3_core"
    

    with open(f'{pri_in_carrier}','w') as f:
        f.write("SEQUENCE_ID="+SEQUENCE_ID+'\n')
        f.write("SEQUENCE_TEMPLATE="+SEQUENCE_TEMPLATE+'\n')
        f.write("PRIMER_TASK="+PRIMER_TASK+'\n')
        f.write("PRIMER_PICK_LEFT_PRIMER="+PRIMER_PICK_LEFT_PRIMER+'\n')
        f.write("PRIMER_PICK_INTERNAL_OLIGO="+PRIMER_PICK_INTERNAL_OLIGO+'\n')
        f.write("PRIMER_PICK_RIGHT_PRIMER="+PRIMER_PICK_RIGHT_PRIMER+'\n')
        f.write("PRIMER_OPT_SIZE="+PRIMER_OPT_SIZE+'\n')
        f.write("PRIMER_MIN_SIZE="+PRIMER_MIN_SIZE+'\n')
        f.write("PRIMER_MAX_SIZE="+PRIMER_MAX_SIZE+'\n')
        f.write("PRIMER_PRODUCT_SIZE_RANGE="+PRIMER_PRODUCT_SIZE_RANGE_FROM+'-'+PRIMER_PRODUCT_SIZE_RANGE_TO+'\n')
        f.write("PRIMER_EXPLAIN_FLAG="+PRIMER_EXPLAIN_FLAG+'\n')
        f.write("=")

    subprocess.run([f'{pri_exe_path}','--output',f'{pri_out_carrier}',f'{pri_in_carrier}'])
    
    blast_left_carrier="./static/blast/input/carrier/blast_left.fasta"
    blast_right_carrier="./static/blast/input/carrier/blast_right.fasta"
    blast_template_carrier="./static/blast/input/carrier/blast_template.fasta"
    blast_lr_carrier="./static/blast/input/carrier/blast_lr.fasta"
    blast_db_carrier="./static/blast/input/carrier/blast_db.fasta"
    blast_out="./static/blast/output/carrier/results"
    match1="LEFT"
    match2="RIGHT"
    match3="SEQUENCE_TEMPLATE"
    left=[]
    right=[]
    template=[]
    i2=0
    j=0
    result = ""

    from Bio.Blast.Applications import NcbiblastnCommandline
    from Bio.Blast.Applications import NcbimakeblastdbCommandline
    from Bio.Blast import NCBIXML

    with open(f'{pri_out_carrier}', 'r') as f2:
        line = f2.readline()
        while line:
            if ((line[14:21] == match3[0:7]) & ((line[7:10]) == match1[0:3])) : 
                left.insert(i2,line[24:])
            elif((line[15:22] == match3[0:7]) & (line[7:11] == match2[0:4])): 
                right.insert(i2,line[25:])
                i2=i2+1
            elif(line[0:16] == match3[0:16]): template=line[18:]
            line=f2.readline()
        while(j<i2):
            f1=open('./static/blast/input/carrier/blast_left'+str(j)+'.fasta', 'w')
            f1.write(">LEFT"+str(j)+'\n')
            f1.write(left[j])
            f1.close()

            f1=open('./static/blast/input/carrier/blast_right'+str(j)+'.fasta', 'w')
            f1.write(">RIGHT"+str(j)+'\n')
            f1.write(right[j])
            f1.close()

            f1=open('./static/blast/input/carrier/blast_template'+str(j)+'.fasta', 'w')
            f1.write(">TEMPLATE"+str(j)+'\n')
            f1.write(template)
            f1.close()

            f1=open('./static/blast/input/carrier/blast_lr'+str(j)+'.fasta', 'w')
            f1.write(">LEFT"+str(j)+'\n')
            f1.write(left[j])
            f1.write(">RIGHT"+str(j)+'\n')
            f1.write(right[j])
            f1.close()

            f1=open('./static/blast/input/carrier/blast_db'+str(j)+'.fasta', 'w')
            f1.write(">LEFT"+str(j)+'\n')
            f1.write(left[j])
            f1.write(">RIGHT"+str(j)+'\n')
            f1.write(right[j])
            f1.write(">TEMPLATE"+str(j)+'\n')
            f1.write(template)
            f1.close()

            makedb=NcbimakeblastdbCommandline(input_file='./static/blast/input/carrier/blast_db'+str(j)+'.fasta', dbtype="nucl", out="./static/blast/input/carrier/template"+str(j)+".fasta")
            stdout, stderr = makedb()

            # 设置BLAST程序的路径和参数
            blastn_cline = NcbiblastnCommandline(query='./static/blast/input/carrier/blast_lr'+str(j)+'.fasta', db="./static/blast/input/carrier/template.fasta", outfmt=1, out="./static/blast/output/carrier/results"+str(j)+".txt", dust="no", word_size="11")
            stdout, stderr = blastn_cline()
            
            print("BLAST finished")

            

            # 读取BLAST结果文件
            #with open("blast_lr_results0.xml") as blast_file:
                #blast_records = NCBIXML.parse(blast_file)

                #for record in blast_records:
                    # 在这里处理每个比对结果
                    # 可以检查引物与模板的匹配位置、匹配得分等信息
                    # record.query, record.subject, record.query_start, record.query_end, record.subject_start, record.subject_end, record.score, 等等
                    #print(record)

            j=j+1

    with open('./static/blast/output/final.fasta', 'w') as f:
        f2=open('./static/blast/final.txt', 'w')

        j=0
        while(j<i1*i2):
            t1=j%i1
            t2=j%i2
            
            f.write(">FINAL_LEFT"+str(j)+"\n")
            f2.write(">FINAL_LEFT"+str(j)+"\n")

            f1=open('./static/blast/input/carrier/blast_right'+str(t2)+'.fasta', 'r')
            line=f1.readline()
            line=f1.readline()
            f.write(line[:-1])
            f2.write(line[:-1])
            f1.close()

            f1=open('./static/blast/input/primer/blast_left'+str(t1)+'.fasta', 'r')
            line=f1.readline()
            line=f1.readline()
            f.write(line)
            f2.write(line)
            f1.close()

            f.write(">FINAL_RIGHT"+str(j)+"\n")
            f2.write(">FINAL_RIGHT"+str(j)+"\n")

            f1=open('./static/blast/input/primer/blast_right'+str(t1)+'.fasta', 'r')
            line=f1.readline()
            line=f1.readline()
            f.write(line[:-1])
            f2.write(line[:-1])
            f1.close()

            f1=open('./static/blast/input/carrier/blast_left'+str(t2)+'.fasta', 'r')
            line=f1.readline()
            line=f1.readline()
            f.write(line)
            f2.write(line)
            f1.close()

            
            j=j+1
        f2.close()

    dirpath = os.path.abspath('./static/blast/output/')
    outpath = os.path.join('./static/blast/', 'primer_blast_result.zip')
    zip = zipfile.ZipFile(outpath, "w", zipfile.ZIP_DEFLATED)
    for path, dirnames, filenames in os.walk(dirpath):
        # 去掉目标跟路径，只对目标文件夹下边的文件及文件夹进行压缩
        fpath = path.replace(dirpath, '')
 
        for filename in filenames:
            zip.write(os.path.join(path, filename), os.path.join(fpath, filename))
    zip.close()

    if(i1==0):
        data=0
    elif(i2==0):
        data=1
    else:
        data=2

    response = Response(response=str(data),status=200,content_type='text/html;charset=utf-8')
    

    return response

if __name__ == "__main__":
    app.config["JSON_AS_ASCII"] = False
    app.run(host='0.0.0.0', port='8080')
    